//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SysUser = newSysUserTable("public", "sys_user", "")

type sysUserTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnInteger
	Email               postgres.ColumnString
	EmailConfirmed      postgres.ColumnBool
	DisplayName         postgres.ColumnString
	GivenName           postgres.ColumnString
	PhoneNumber         postgres.ColumnString
	PhoneNumberVerified postgres.ColumnBool
	FamilyName          postgres.ColumnString
	Locked              postgres.ColumnBool
	PasswordHash        postgres.ColumnString
	LastLoginAt         postgres.ColumnTimestampz
	CreatedAt           postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SysUserTable struct {
	sysUserTable

	EXCLUDED sysUserTable
}

// AS creates new SysUserTable with assigned alias
func (a SysUserTable) AS(alias string) *SysUserTable {
	return newSysUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SysUserTable with assigned schema name
func (a SysUserTable) FromSchema(schemaName string) *SysUserTable {
	return newSysUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SysUserTable with assigned table prefix
func (a SysUserTable) WithPrefix(prefix string) *SysUserTable {
	return newSysUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SysUserTable with assigned table suffix
func (a SysUserTable) WithSuffix(suffix string) *SysUserTable {
	return newSysUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSysUserTable(schemaName, tableName, alias string) *SysUserTable {
	return &SysUserTable{
		sysUserTable: newSysUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newSysUserTableImpl("", "excluded", ""),
	}
}

func newSysUserTableImpl(schemaName, tableName, alias string) sysUserTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		EmailColumn               = postgres.StringColumn("email")
		EmailConfirmedColumn      = postgres.BoolColumn("email_confirmed")
		DisplayNameColumn         = postgres.StringColumn("display_name")
		GivenNameColumn           = postgres.StringColumn("given_name")
		PhoneNumberColumn         = postgres.StringColumn("phone_number")
		PhoneNumberVerifiedColumn = postgres.BoolColumn("phone_number_verified")
		FamilyNameColumn          = postgres.StringColumn("family_name")
		LockedColumn              = postgres.BoolColumn("locked")
		PasswordHashColumn        = postgres.StringColumn("password_hash")
		LastLoginAtColumn         = postgres.TimestampzColumn("last_login_at")
		CreatedAtColumn           = postgres.TimestampzColumn("created_at")
		allColumns                = postgres.ColumnList{IDColumn, EmailColumn, EmailConfirmedColumn, DisplayNameColumn, GivenNameColumn, PhoneNumberColumn, PhoneNumberVerifiedColumn, FamilyNameColumn, LockedColumn, PasswordHashColumn, LastLoginAtColumn, CreatedAtColumn}
		mutableColumns            = postgres.ColumnList{EmailColumn, EmailConfirmedColumn, DisplayNameColumn, GivenNameColumn, PhoneNumberColumn, PhoneNumberVerifiedColumn, FamilyNameColumn, LockedColumn, PasswordHashColumn, LastLoginAtColumn, CreatedAtColumn}
	)

	return sysUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		Email:               EmailColumn,
		EmailConfirmed:      EmailConfirmedColumn,
		DisplayName:         DisplayNameColumn,
		GivenName:           GivenNameColumn,
		PhoneNumber:         PhoneNumberColumn,
		PhoneNumberVerified: PhoneNumberVerifiedColumn,
		FamilyName:          FamilyNameColumn,
		Locked:              LockedColumn,
		PasswordHash:        PasswordHashColumn,
		LastLoginAt:         LastLoginAtColumn,
		CreatedAt:           CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
