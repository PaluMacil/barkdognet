//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Invitation = newInvitationTable("public", "invitation", "")

type invitationTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	InviterID      postgres.ColumnInteger
	InviteeEmail   postgres.ColumnString
	InvitationCode postgres.ColumnString
	Pending        postgres.ColumnBool
	CreatedAt      postgres.ColumnTimestampz
	ExpiresAt      postgres.ColumnTimestampz
	AcceptedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InvitationTable struct {
	invitationTable

	EXCLUDED invitationTable
}

// AS creates new InvitationTable with assigned alias
func (a InvitationTable) AS(alias string) *InvitationTable {
	return newInvitationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InvitationTable with assigned schema name
func (a InvitationTable) FromSchema(schemaName string) *InvitationTable {
	return newInvitationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InvitationTable with assigned table prefix
func (a InvitationTable) WithPrefix(prefix string) *InvitationTable {
	return newInvitationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InvitationTable with assigned table suffix
func (a InvitationTable) WithSuffix(suffix string) *InvitationTable {
	return newInvitationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInvitationTable(schemaName, tableName, alias string) *InvitationTable {
	return &InvitationTable{
		invitationTable: newInvitationTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newInvitationTableImpl("", "excluded", ""),
	}
}

func newInvitationTableImpl(schemaName, tableName, alias string) invitationTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		InviterIDColumn      = postgres.IntegerColumn("inviter_id")
		InviteeEmailColumn   = postgres.StringColumn("invitee_email")
		InvitationCodeColumn = postgres.StringColumn("invitation_code")
		PendingColumn        = postgres.BoolColumn("pending")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		ExpiresAtColumn      = postgres.TimestampzColumn("expires_at")
		AcceptedAtColumn     = postgres.TimestampzColumn("accepted_at")
		allColumns           = postgres.ColumnList{IDColumn, InviterIDColumn, InviteeEmailColumn, InvitationCodeColumn, PendingColumn, CreatedAtColumn, ExpiresAtColumn, AcceptedAtColumn}
		mutableColumns       = postgres.ColumnList{InviterIDColumn, InviteeEmailColumn, InvitationCodeColumn, PendingColumn, CreatedAtColumn, ExpiresAtColumn, AcceptedAtColumn}
	)

	return invitationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		InviterID:      InviterIDColumn,
		InviteeEmail:   InviteeEmailColumn,
		InvitationCode: InvitationCodeColumn,
		Pending:        PendingColumn,
		CreatedAt:      CreatedAtColumn,
		ExpiresAt:      ExpiresAtColumn,
		AcceptedAt:     AcceptedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
