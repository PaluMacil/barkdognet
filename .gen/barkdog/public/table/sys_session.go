//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SysSession = newSysSessionTable("public", "sys_session", "")

type sysSessionTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	SysUserID    postgres.ColumnInteger
	SessionToken postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	IPAddress    postgres.ColumnString
	UserAgent    postgres.ColumnString
	TenantID     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SysSessionTable struct {
	sysSessionTable

	EXCLUDED sysSessionTable
}

// AS creates new SysSessionTable with assigned alias
func (a SysSessionTable) AS(alias string) *SysSessionTable {
	return newSysSessionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SysSessionTable with assigned schema name
func (a SysSessionTable) FromSchema(schemaName string) *SysSessionTable {
	return newSysSessionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SysSessionTable with assigned table prefix
func (a SysSessionTable) WithPrefix(prefix string) *SysSessionTable {
	return newSysSessionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SysSessionTable with assigned table suffix
func (a SysSessionTable) WithSuffix(suffix string) *SysSessionTable {
	return newSysSessionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSysSessionTable(schemaName, tableName, alias string) *SysSessionTable {
	return &SysSessionTable{
		sysSessionTable: newSysSessionTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newSysSessionTableImpl("", "excluded", ""),
	}
}

func newSysSessionTableImpl(schemaName, tableName, alias string) sysSessionTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		SysUserIDColumn    = postgres.IntegerColumn("sys_user_id")
		SessionTokenColumn = postgres.StringColumn("session_token")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		IPAddressColumn    = postgres.StringColumn("ip_address")
		UserAgentColumn    = postgres.StringColumn("user_agent")
		TenantIDColumn     = postgres.IntegerColumn("tenant_id")
		allColumns         = postgres.ColumnList{IDColumn, SysUserIDColumn, SessionTokenColumn, CreatedAtColumn, IPAddressColumn, UserAgentColumn, TenantIDColumn}
		mutableColumns     = postgres.ColumnList{SysUserIDColumn, SessionTokenColumn, CreatedAtColumn, IPAddressColumn, UserAgentColumn, TenantIDColumn}
	)

	return sysSessionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		SysUserID:    SysUserIDColumn,
		SessionToken: SessionTokenColumn,
		CreatedAt:    CreatedAtColumn,
		IPAddress:    IPAddressColumn,
		UserAgent:    UserAgentColumn,
		TenantID:     TenantIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
