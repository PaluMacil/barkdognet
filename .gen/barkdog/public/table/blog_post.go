//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BlogPost = newBlogPostTable("public", "blog_post", "")

type blogPostTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CategoryID postgres.ColumnInteger
	Title      postgres.ColumnString
	Slug       postgres.ColumnString
	Summary    postgres.ColumnString
	Status     postgres.ColumnString
	Keywords   postgres.ColumnString
	Body       postgres.ColumnString
	AuthorID   postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BlogPostTable struct {
	blogPostTable

	EXCLUDED blogPostTable
}

// AS creates new BlogPostTable with assigned alias
func (a BlogPostTable) AS(alias string) *BlogPostTable {
	return newBlogPostTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BlogPostTable with assigned schema name
func (a BlogPostTable) FromSchema(schemaName string) *BlogPostTable {
	return newBlogPostTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BlogPostTable with assigned table prefix
func (a BlogPostTable) WithPrefix(prefix string) *BlogPostTable {
	return newBlogPostTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BlogPostTable with assigned table suffix
func (a BlogPostTable) WithSuffix(suffix string) *BlogPostTable {
	return newBlogPostTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBlogPostTable(schemaName, tableName, alias string) *BlogPostTable {
	return &BlogPostTable{
		blogPostTable: newBlogPostTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newBlogPostTableImpl("", "excluded", ""),
	}
}

func newBlogPostTableImpl(schemaName, tableName, alias string) blogPostTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CategoryIDColumn = postgres.IntegerColumn("category_id")
		TitleColumn      = postgres.StringColumn("title")
		SlugColumn       = postgres.StringColumn("slug")
		SummaryColumn    = postgres.StringColumn("summary")
		StatusColumn     = postgres.StringColumn("status")
		KeywordsColumn   = postgres.StringColumn("keywords")
		BodyColumn       = postgres.StringColumn("body")
		AuthorIDColumn   = postgres.IntegerColumn("author_id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		allColumns       = postgres.ColumnList{IDColumn, CategoryIDColumn, TitleColumn, SlugColumn, SummaryColumn, StatusColumn, KeywordsColumn, BodyColumn, AuthorIDColumn, CreatedAtColumn}
		mutableColumns   = postgres.ColumnList{CategoryIDColumn, TitleColumn, SlugColumn, SummaryColumn, StatusColumn, KeywordsColumn, BodyColumn, AuthorIDColumn, CreatedAtColumn}
	)

	return blogPostTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CategoryID: CategoryIDColumn,
		Title:      TitleColumn,
		Slug:       SlugColumn,
		Summary:    SummaryColumn,
		Status:     StatusColumn,
		Keywords:   KeywordsColumn,
		Body:       BodyColumn,
		AuthorID:   AuthorIDColumn,
		CreatedAt:  CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
