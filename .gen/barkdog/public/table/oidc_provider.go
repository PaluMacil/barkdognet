//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OidcProvider = newOidcProviderTable("public", "oidc_provider", "")

type oidcProviderTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	DisplayName   postgres.ColumnString
	IssuerURL     postgres.ColumnString
	DiscoveryURL  postgres.ColumnString
	Scopes        postgres.ColumnString
	ClientID      postgres.ColumnString
	ClientSecret  postgres.ColumnString
	RedirectURL   postgres.ColumnString
	AccessType    postgres.ColumnString
	AzureTenantID postgres.ColumnString
	Active        postgres.ColumnBool
	CreatedAt     postgres.ColumnTimestampz
	TenantID      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OidcProviderTable struct {
	oidcProviderTable

	EXCLUDED oidcProviderTable
}

// AS creates new OidcProviderTable with assigned alias
func (a OidcProviderTable) AS(alias string) *OidcProviderTable {
	return newOidcProviderTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OidcProviderTable with assigned schema name
func (a OidcProviderTable) FromSchema(schemaName string) *OidcProviderTable {
	return newOidcProviderTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OidcProviderTable with assigned table prefix
func (a OidcProviderTable) WithPrefix(prefix string) *OidcProviderTable {
	return newOidcProviderTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OidcProviderTable with assigned table suffix
func (a OidcProviderTable) WithSuffix(suffix string) *OidcProviderTable {
	return newOidcProviderTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOidcProviderTable(schemaName, tableName, alias string) *OidcProviderTable {
	return &OidcProviderTable{
		oidcProviderTable: newOidcProviderTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newOidcProviderTableImpl("", "excluded", ""),
	}
}

func newOidcProviderTableImpl(schemaName, tableName, alias string) oidcProviderTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		DisplayNameColumn   = postgres.StringColumn("display_name")
		IssuerURLColumn     = postgres.StringColumn("issuer_url")
		DiscoveryURLColumn  = postgres.StringColumn("discovery_url")
		ScopesColumn        = postgres.StringColumn("scopes")
		ClientIDColumn      = postgres.StringColumn("client_id")
		ClientSecretColumn  = postgres.StringColumn("client_secret")
		RedirectURLColumn   = postgres.StringColumn("redirect_url")
		AccessTypeColumn    = postgres.StringColumn("access_type")
		AzureTenantIDColumn = postgres.StringColumn("azure_tenant_id")
		ActiveColumn        = postgres.BoolColumn("active")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		TenantIDColumn      = postgres.IntegerColumn("tenant_id")
		allColumns          = postgres.ColumnList{IDColumn, DisplayNameColumn, IssuerURLColumn, DiscoveryURLColumn, ScopesColumn, ClientIDColumn, ClientSecretColumn, RedirectURLColumn, AccessTypeColumn, AzureTenantIDColumn, ActiveColumn, CreatedAtColumn, TenantIDColumn}
		mutableColumns      = postgres.ColumnList{DisplayNameColumn, IssuerURLColumn, DiscoveryURLColumn, ScopesColumn, ClientIDColumn, ClientSecretColumn, RedirectURLColumn, AccessTypeColumn, AzureTenantIDColumn, ActiveColumn, CreatedAtColumn, TenantIDColumn}
	)

	return oidcProviderTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		DisplayName:   DisplayNameColumn,
		IssuerURL:     IssuerURLColumn,
		DiscoveryURL:  DiscoveryURLColumn,
		Scopes:        ScopesColumn,
		ClientID:      ClientIDColumn,
		ClientSecret:  ClientSecretColumn,
		RedirectURL:   RedirectURLColumn,
		AccessType:    AccessTypeColumn,
		AzureTenantID: AzureTenantIDColumn,
		Active:        ActiveColumn,
		CreatedAt:     CreatedAtColumn,
		TenantID:      TenantIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
