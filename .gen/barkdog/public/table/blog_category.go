//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BlogCategory = newBlogCategoryTable("public", "blog_category", "")

type blogCategoryTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	CategoryName postgres.ColumnString
	TenantID     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BlogCategoryTable struct {
	blogCategoryTable

	EXCLUDED blogCategoryTable
}

// AS creates new BlogCategoryTable with assigned alias
func (a BlogCategoryTable) AS(alias string) *BlogCategoryTable {
	return newBlogCategoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BlogCategoryTable with assigned schema name
func (a BlogCategoryTable) FromSchema(schemaName string) *BlogCategoryTable {
	return newBlogCategoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BlogCategoryTable with assigned table prefix
func (a BlogCategoryTable) WithPrefix(prefix string) *BlogCategoryTable {
	return newBlogCategoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BlogCategoryTable with assigned table suffix
func (a BlogCategoryTable) WithSuffix(suffix string) *BlogCategoryTable {
	return newBlogCategoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBlogCategoryTable(schemaName, tableName, alias string) *BlogCategoryTable {
	return &BlogCategoryTable{
		blogCategoryTable: newBlogCategoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newBlogCategoryTableImpl("", "excluded", ""),
	}
}

func newBlogCategoryTableImpl(schemaName, tableName, alias string) blogCategoryTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		CategoryNameColumn = postgres.StringColumn("category_name")
		TenantIDColumn     = postgres.IntegerColumn("tenant_id")
		allColumns         = postgres.ColumnList{IDColumn, CategoryNameColumn, TenantIDColumn}
		mutableColumns     = postgres.ColumnList{CategoryNameColumn, TenantIDColumn}
	)

	return blogCategoryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CategoryName: CategoryNameColumn,
		TenantID:     TenantIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
