version: '3'

vars:
  EXE:
    sh: |
      if [[ "$(go env GOOS)" == "windows" ]]; then
        echo ".exe"
      else
        echo ""
      fi
  DB_COMMANDS:
    sh: |
      echo "CREATE DATABASE barkdog; CREATE USER barkadmin LOGIN; ALTER DATABASE barkdog OWNER TO barkadmin;"

tasks:

  resetdb:
    desc: Resets the database (requires yq)
    cmds:
      - |
        USERS=( "$(whoami)" "postgres" )
        DBNAME="postgres"
        TARGET_DB="barkdog"
        TARGET_USER="barkadmin"
        USE_EXISTING_USER_COMMAND="DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='${TARGET_USER}') THEN CREATE ROLE ${TARGET_USER} LOGIN; END IF; END \$\$;"

        FOUND_DB=false
        for dbuser in "${USERS[@]}"; do
            COMMAND="psql -U $dbuser -d $DBNAME -c '\\conninfo'"
            echo "Attempt: $COMMAND"
            eval $COMMAND &> /dev/null
            if [ $? -eq 0 ]; then
                USER=$dbuser
                FOUND_DB=true
                break
            fi
        done 

        if [ "$FOUND_DB" = true ]; then
            psql -U ${USER} -d ${DBNAME} -c "${USE_EXISTING_USER_COMMAND}"
            psql -U ${USER} -d ${DBNAME} -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '${TARGET_DB}' AND pid <> pg_backend_pid();"
            psql -U ${USER} -d ${DBNAME} -c "DROP DATABASE IF EXISTS ${TARGET_DB};"
            psql -U ${USER} -d ${DBNAME} -c "CREATE DATABASE ${TARGET_DB};"
            psql -U ${USER} -d ${DBNAME} -c "ALTER DATABASE ${TARGET_DB} OWNER TO ${TARGET_USER};"
        else
            echo "Could not establish connection to the DB"
            exit 1
        fi

  mup:
    desc: Task to run migrations
    deps: ['build_migrate']
    cmds:
      - './dist/migrate/migrate{{.EXE}} up'

  mstatus:
    desc: Task to run migrations
    deps: ['build_migrate']
    cmds:
      - './dist/migrate/migrate{{.EXE}} status'

  genmodel:
    desc: Generates models from database
    deps: [ 'mup' ]
    cmds:
      - './dist/pggen/pggen{{.EXE}}'

  gen:
    desc: Calls all generation tasks
    deps: [ 'genmodel' ]

  build_serve:
    desc: Task to build serve tool.
    deps: [ 'build_ui', 'gen' ]
    cmds:
      - 'go build -o ./dist/serve/serve{{.EXE}} ./cmd/serve'

  build_pggen:
    desc: Task to build pggen tool.
    cmds:
      - 'go build -o ./dist/pggen/pggen{{.EXE}} ./cmd/pggen'

  build_migrate:
    desc: Task to build migrate tool.
    cmds:
      - 'go build -o ./dist/migrate/migrate{{.EXE}} ./cmd/migrate'

  build_ui:
    desc: Build the frontend application.
    cmds:
      - 'node build_ui.js'

  watch_ui:
    desc: Watch and rebuild the frontend application on changes.
    cmds:
      - 'node build_ui.js --watch'

  build:
    desc: Calls all build tasks and depends on gen
    deps: [ 'build_serve', 'build_pggen', 'build_migrate' ]